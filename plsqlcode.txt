BEGIN
	DBMS_OUTPUT.PUT_LINE('HELLO WORLD...');
END;
================================
DECLARE
	V_NO NUMBER(5,2);
	V_DT DATE:=SYSDATE+4;
	C_COMM CONSTANT NUMBER:=2;
BEGIN
	V_NO:=100;
	V_NO:=V_NO*(C_COMM/100);
	DBMS_OUTPUT.PUT_LINE('DAY:'||TO_CHAR(V_DT,'DAY')||'COMMISSION:'||V_NO);
END;
=====================================
DECLARE
	V_EMPID NUMBER;
	V_NAME EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_IND V_SAL%TYPE;
BEGIN
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY INTO V_EMPID,V_NAME,V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100;
	
	V_SAL:=V_SAL*1.10;
	DBMS_OUTPUT.PUT_LINE('ID:'||V_EMPID||'	NAME:'||V_NAME||'NEW SALARY'||
	TO_CHAR(V_SAL,'99,999.99'));
END;
=================================================
DECLARE
	TYPE EMPINCOME IS RECORD
	(V_ID EMPLOYEES.EMPLOYEE_ID%TYPE,
	V_SAL EMPLOYEES.SALARY%TYPE,
	V_COMM EMPLOYEES.COMMISSION_PCT%TYPE,
	V_TOTAL NUMBER(9,2));

	V_INCOME EMPINCOME;
BEGIN
	SELECT EMPLOYEE_ID,SALARY,COMMISSION_PCT,0 INTO V_INCOME
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100;
	
	DBMS_OUTPUT.PUT_LINE('ID:'||V_INCOME.V_ID||'TOTAL INCOME:'||				V_INCOME.V_TOTAL);
	

	V_INCOME.V_TOTAL:=V_INCOME.V_SAL+V_INCOME.V_SAL*NVL(V_INCOME.V_COMM,0);
	
	DBMS_OUTPUT.PUT_LINE('ID:'||V_INCOME.V_ID||'TOTAL INCOME:'||				V_INCOME.V_TOTAL);	
		
END;
================================================================
DECLARE

	TYPE EMPPERSONAL IS RECORD
	(V_ID EMPLOYEES.EMPLOYEE_ID%TYPE,
	V_NAME EMPLOYEES.FIRST_NAME%TYPE,
	V_PH EMPLOYEES.PHONE_NUMBER%TYPE);
	
	TYPE EMPINCOME IS RECORD
	(V_PER EMPPERSONAL,
	V_SAL EMPLOYEES.SALARY%TYPE,
	V_COMM EMPLOYEES.COMMISSION_PCT%TYPE,
	V_TOTAL NUMBER(9,2));

	V_PERSONAL EMPPERSONAL;	
	V_INCOME EMPINCOME;
BEGIN
	SELECT EMPLOYEE_ID,FIRST_NAME,PHONE_NUMBER INTO V_PERSONAL 
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100;

	V_INCOME.V_PER:=V_PERSONAL;
	
	SELECT SALARY,COMMISSION_PCT,0 INTO 		V_INCOME.V_SAL,V_INCOME.V_COMM,V_INCOME.V_TOTAL	
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100;

	
	DBMS_OUTPUT.PUT_LINE('ID:'||V_INCOME.V_PER.V_ID||'TOTAL INCOME:'||				V_INCOME.V_TOTAL);
	

	V_INCOME.V_TOTAL:=V_INCOME.V_SAL+V_INCOME.V_SAL*NVL(V_INCOME.V_COMM,0);
	
	DBMS_OUTPUT.PUT_LINE('ID:'||V_INCOME.V_PER.V_ID||'TOTAL INCOME:'||				V_INCOME.V_TOTAL);	
		
END;
==========================================================
VARIABLE SCOPE AND VISIBILITY
<<OB>>
DECLARE
	X NUMBER(5):=5;
	Y NUMBER(5):=10;
BEGIN
	DBMS_OUTPUT.PUT_LINE(X);
	DBMS_OUTPUT.PUT_LINE(Y);
	<<IB>>
	DECLARE
		X NUMBER(5):=6;
		Z NUMBER(5):=30;
	BEGIN
		DBMS_OUTPUT.PUT_LINE(X);
		DBMS_OUTPUT.PUT_LINE(OB.X);
		DBMS_OUTPUT.PUT_LINE(Z);
		DBMS_OUTPUT.PUT_LINE(Y);
	END;
	X:=X+1;
	DBMS_OUTPUT.PUT_LINE(X);
	--DBMS_OUTPUT.PUT_LINE(IB.X);
END;
=================================================
HOST OR BIND VARIABLE

DECLARE
	V_EMPID NUMBER;
	V_NAME EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	
BEGIN
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY INTO V_EMPID,V_NAME,V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=&ID;
	
	V_SAL:=V_SAL*1.10;

	DBMS_OUTPUT.PUT_LINE('ID:'||V_EMPID||'	NAME:'||V_NAME||'NEW SALARY'||
	TO_CHAR(V_SAL,'99,999.99'));
END;
====================================================
DECLARE
	V_NAME EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	
BEGIN
	SELECT FIRST_NAME,SALARY INTO V_NAME,V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=&ID;
	
	V_SAL:=V_SAL*1.10;

	DBMS_OUTPUT.PUT_LINE('ID:'||ID||'	NAME:'||V_NAME||'	NEW SALARY'||
	TO_CHAR(V_SAL,'99,999.99'));
END;
====================================================
LOOPING

DECLARE
	V_AVGSAL NUMBER(9,2);
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_INC V_SAL%TYPE;
	V_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
BEGIN
	SELECT ROUND(AVG(SALARY),0) INTO V_AVGSAL
	FROM EMPLOYEES;
	
	SELECT EMPLOYEE_ID,SALARY INTO V_ID,V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=132;

	V_INC:=V_SAL;

	DBMS_OUTPUT.PUT_LINE('ID:'||V_ID||'ORDINAL SALARY:'||V_SAL||'AVEREGE SALARY:'||V_AVGSAL);

	WHILE 	V_INC < V_AVGSAL	
	LOOP
		V_INC:=V_INC*1.02;
		DBMS_OUTPUT.PUT_LINE('INCREMENT:'||V_INC);
	END LOOP;
	
	V_INC:=ROUND(V_INC,0);
	
	IF V_INC > V_SAL THEN 
		UPDATE EMPLOYEES
		SET SALARY=V_INC
		WHERE EMPLOYEE_ID=V_ID;
	ELSE
		DBMS_OUTPUT.PUT_LINE('NOT ELIGEBLE FOR INCREMENT...');
	END IF;
			
END;
=======================================================
IMPLICIT CURSOR

DECLARE
	V_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
BEGIN
	UPDATE EMPLOYEES
	SET SALARY=SALARY+1000
	WHERE DEPARTMENT_ID=30;
	
	DBMS_OUTPUT.PUT_LINE('ROWCOUNT:'||SQL%ROWCOUNT);
	
	UPDATE EMPLOYEES
	SET SALARY=SALARY+1000
	WHERE DEPARTMENT_ID=300;
	
	DBMS_OUTPUT.PUT_LINE('ROWCOUNT:'||SQL%ROWCOUNT);
END;
========================================
CURSOR-1 (BASIC)

DECLARE
	CURSOR EMPINCCUR IS
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,COMMISSION_PCT
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID=30;
	
	V_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
	V_NM EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_COMM EMPLOYEES.COMMISSION_PCT%TYPE;
	V_INC	NUMBER(9,2);
	
BEGIN
	IF   NOT EMPINCCUR%ISOPEN THEN
		OPEN  EMPINCCUR;
	END IF;

	DBMS_OUTPUT.PUT_LINE('ID	NAME	TOTALINCOME');
	
	LOOP
		FETCH EMPINCCUR INTO V_ID,V_NM,V_SAL,V_COMM;
		IF EMPINCCUR%FOUND THEN
			V_INC:=V_SAL+V_SAL*NVL(V_COMM,0);	
			DBMS_OUTPUT.PUT_LINE(V_ID||'	'||V_NM||'		'||V_INC);
		END IF;
		EXIT WHEN EMPINCCUR%NOTFOUND;
	END LOOP;
	
	DBMS_OUTPUT.PUT_LINE(EMPINCCUR%ROWCOUNT||' Employees are eligble for increment');
	CLOSE EMPINCCUR;
END;
===========================================
CURSOR-2 (CURSOR ATTRIBUTES)

DECLARE
	CURSOR EMPINCCUR IS
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,COMMISSION_PCT
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID=30;
	
	V_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
	V_NM EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_COMM EMPLOYEES.COMMISSION_PCT%TYPE;
	V_INC	NUMBER(9,2);
	
BEGIN
	IF   NOT EMPINCCUR%ISOPEN THEN
		OPEN  EMPINCCUR;
	END IF;

	DBMS_OUTPUT.PUT_LINE('ID	NAME	TOTALINCOME');
	
	LOOP
		FETCH EMPINCCUR INTO V_ID,V_NM,V_SAL,V_COMM;
		IF EMPINCCUR%FOUND THEN
			V_INC:=V_SAL+V_SAL*NVL(V_COMM,0);	
			DBMS_OUTPUT.PUT_LINE(V_ID||'	'||V_NM||'		'||V_INC);
		END IF;
		EXIT WHEN EMPINCCUR%ROWCOUNT>3;
	END LOOP;
	
	DBMS_OUTPUT.PUT_LINE(EMPINCCUR%ROWCOUNT||' Employees are eligble for increment');
	CLOSE EMPINCCUR;
END;
===================================================
CURSOR -3 (CURSOR FOR LOOP)
DECLARE
	CURSOR EMPINCCUR IS
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,COMMISSION_PCT
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID=30;
	
	V_INC	NUMBER(9,2);
	
BEGIN
	DBMS_OUTPUT.PUT_LINE('ID	NAME	TOTALINCOME');
	
	FOR V_EMPINCCURREC IN EMPINCCUR
	LOOP
		IF EMPINCCUR%FOUND THEN	
			V_INC:=V_EMPINCCURREC.SALARY+V_EMPINCCURREC.SALARY*NVL(V_EMPINCCURREC.COMMISSION_PCT,0);
			DBMS_OUTPUT.PUT_LINE(V_EMPINCCURREC.EMPLOYEE_ID||'	'||V_EMPINCCURREC.FIRST_NAME||'		'||V_INC);
		END IF;
	END LOOP;
	
END;
============================
CURSOR-4 (PARAMETERISED CURSOR)

DECLARE
	CURSOR EMPINCCUR(CODE NUMBER) IS
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,COMMISSION_PCT
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID=CODE;
	
	V_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
	V_NM EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_COMM EMPLOYEES.COMMISSION_PCT%TYPE;
	V_INC	NUMBER(9,2);
	
BEGIN
	IF   NOT EMPINCCUR%ISOPEN THEN
		OPEN  EMPINCCUR(30);
	END IF;

	DBMS_OUTPUT.PUT_LINE('ID	NAME	TOTALINCOME');
	
	LOOP
		FETCH EMPINCCUR INTO V_ID,V_NM,V_SAL,V_COMM;
		IF EMPINCCUR%FOUND THEN
			V_INC:=V_SAL+V_SAL*NVL(V_COMM,0);	
			DBMS_OUTPUT.PUT_LINE(V_ID||'	'||V_NM||'		'||V_INC);
		END IF;
		EXIT WHEN EMPINCCUR%NOTFOUND;
	END LOOP;
	
	DBMS_OUTPUT.PUT_LINE(EMPINCCUR%ROWCOUNT||' Employees are eligble for increment');
	CLOSE EMPINCCUR;
END;
======================================
CURSOR-5 (FORUPDATE)

DECLARE
       CURSOR SALCUR IS
       SELECT EMPLOYEE_ID,SALARY
      FROM EMPLOYEES
      WHERE DEPARTMENT_ID=30
      FOR UPDATE OF SALARY;
       V_AVGSAL NUMBER(9,2);
       V_INC NUMBER(9,2);
    BEGIN
      SELECT ROUND(AVG(SALARY),0) INTO V_AVGSAL
      FROM EMPLOYEES;
      FOR CURREC IN SALCUR    --CURSOR FOR LOOP
      LOOP
              DBMS_OUTPUT.PUT_LINE('ID:'||CURREC.EMPLOYEE_ID||'                               SALARY:'||CURREC.SALARY||'     ANVERAGE SALARY:'||V_AVGSAL);
              V_INC:=CURREC.SALARY;
              WHILE   V_INC < V_AVGSAL
              LOOP
                      V_INC:=V_INC*1.02;
              END LOOP;
                     V_INC:=ROUND(V_INC,0);
              DBMS_OUTPUT.PUT_LINE('NEW SALARY:'||V_INC);
              IF V_INC > CURREC.SALARY THEN
                      UPDATE EMPLOYEES
                     SET SALARY=V_INC
                      WHERE CURRENT OF SALCUR;
                      DBMS_OUTPUT.PUT_LINE('SALARY UPDATED IN THE DATABASE');
              ELSE
              DBMS_OUTPUT.PUT_LINE('NOT ELIGEBLE FOR INCREMENT...');
              END IF;
     END LOOP;       --END CURSOR FOR LOOP
  END;
/

=====================================================
exception handling
DECLARE
	V_EMPID NUMBER;
	V_NAME EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_IND V_SAL%TYPE;
BEGIN
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY INTO V_EMPID,V_NAME,V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=10;
	
	V_SAL:=V_SAL*1.10;
	DBMS_OUTPUT.PUT_LINE('ID:'||V_EMPID||'	NAME:'||V_NAME||'NEW SALARY'||
	TO_CHAR(V_SAL,'99,999.99'));
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE NOT FOUND....');
	
END;
================================================
PREDEFINED EXCEPTION

DECLARE
	V_EMPID NUMBER;
	V_NAME EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_IND V_SAL%TYPE;
	ECODE CHAR(10);
	EMSG VARCHAR2(100);
BEGIN
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY INTO V_EMPID,V_NAME,V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=3;
	
	V_SAL:=V_SAL+1000;
	DBMS_OUTPUT.PUT_LINE('ID:'||V_EMPID||'	NAME:'||V_NAME||'NEW SALARY'||
	TO_CHAR(V_SAL,'99,999.99'));
EXCEPTION
		
	WHEN NO_DATA_FOUND THEN
		ECODE:=SQLCODE;
		EMSG:=SUBSTR(SQLERRM,1,100);
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE NOT FOUND....');
		INSERT INTO ERRORLOG
		VALUES(ECODE,EMSG);
	WHEN TOO_MANY_ROWS THEN
		ECODE:=SQLCODE;
		EMSG:=SUBSTR(SQLERRM,1,100);
		DBMS_OUTPUT.PUT_LINE('MULTILPE EMPLOYEES FOUND....');
		INSERT INTO ERRORLOG
		VALUES(ECODE,EMSG);
	WHEN OTHERS THEN
		ECODE:=SQLCODE;
		EMSG:=SUBSTR(SQLERRM,1,100);
		DBMS_OUTPUT.PUT_LINE('SOME EXCEPTION....');
		INSERT INTO ERRORLOG
		VALUES(ECODE,EMSG);
END;
=======================================
NON PREDEFINED
DECLARE
	REF_EXP EXCEPTION;
	PRAGMA EXCEPTION_INIT(REF_EXP,-2292); 
BEGIN
	DELETE FROM DEPARTMENTS
	WHERE DEPARTMENT_ID=30;
EXCEPTION
	WHEN REF_EXP THEN
		DBMS_OUTPUT.PUT_LINE('CHI;LD ROWS FOUND....');	
END;
=====================================
USER DEFINED EXCEPTION

DECLARE
	V_EMPID NUMBER;
	V_NAME EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_HD EMPLOYEES.HIRE_DATE%TYPE;
	V_IND V_SAL%TYPE;
	RET_EMP EXCEPTION;
	
BEGIN
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,HIRE_DATE INTO 					V_EMPID,V_NAME,V_SAL,V_HD	
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100;
	
	IF V_HD >= TO_DATE('01/01/2004','DD/MM/YYYY') THEN
		V_SAL:=V_SAL*1.10;
		DBMS_OUTPUT.PUT_LINE('ID:'||V_EMPID||'	NAME:'||V_NAME||'NEW 					SALARY'||
		TO_CHAR(V_SAL,'99,999.99'));
	ELSE
		RAISE RET_EMP;
	END IF;
	
EXCEPTION
	WHEN RET_EMP THEN
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE HAS RETIERED...');
END;
=====================================
ROLLBACK IN EXCEPTION
DECLARE
	X NUMBER:=10;
BEGIN
	INSERT INTO ERRORLOG VALUES('111','XXXXXX');
	X:=X/0;
	DBMS_OUTPUT.PUT_LINE('WELCOME');
END;
============================
DECLARE
	V_EMPID NUMBER;
	V_NAME EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_HD EMPLOYEES.HIRE_DATE%TYPE;
	V_IND V_SAL%TYPE;
BEGIN
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,HIRE_DATE INTO 					V_EMPID,V_NAME,V_SAL,V_HD	
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100;
	
	IF V_HD >= TO_DATE('01/01/2004','DD/MM/YYYY') THEN
		V_SAL:=V_SAL*1.10;
		DBMS_OUTPUT.PUT_LINE('ID:'||V_EMPID||'	NAME:'||V_NAME||'NEW 					SALARY'||
		TO_CHAR(V_SAL,'99,999.99'));
	ELSE
		RAISE_APPLICATION_ERROR(-20111,'EMPLOYEE HAS RETIERED...');
	END IF;
END;
==============================================
EXCEPTION PROPAGATION
<<OUTER>>
DECLARE
	V_EMPID NUMBER;
	V_NAME EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_HD EMPLOYEES.HIRE_DATE%TYPE;
	V_IND V_SAL%TYPE;
	RET_EMP EXCEPTION;
	
BEGIN
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY,HIRE_DATE INTO 					V_EMPID,V_NAME,V_SAL,V_HD	
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=100;
	<<INNER>>
	BEGIN
		IF V_HD >= TO_DATE('01/01/2004','DD/MM/YYYY') THEN
			V_SAL:=V_SAL*1.10;
			DBMS_OUTPUT.PUT_LINE('ID:'||V_EMPID||'	NAME:'||V_NAME||'NEW 					SALARY'||TO_CHAR(V_SAL,'99,999.99'));
		ELSE
			RAISE RET_EMP;
		END IF;
	END;
	DBMS_OUTPUT.PUT_LINE('TRY WITH A DIFFERENT EMPLOYEE...');
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE NOT FOUND....');
	WHEN TOO_MANY_ROWS THEN
		DBMS_OUTPUT.PUT_LINE('MULTILPE EMPLOYEES FOUND....');
	WHEN RET_EMP THEN
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE HAS RETAIRD....');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('SOME EXCEPTION....');
		
END;
====================================

PROCEDURE

CREATE PROCEDURE DISPINC
IS
	V_AVGSAL NUMBER(9,2);
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_INC V_SAL%TYPE;
	V_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
BEGIN
	SELECT ROUND(AVG(SALARY),0) INTO V_AVGSAL
	FROM EMPLOYEES;
	
	SELECT EMPLOYEE_ID,SALARY INTO V_ID,V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=132;

	V_INC:=V_SAL;

	DBMS_OUTPUT.PUT_LINE('ID:'||V_ID||'ORDINAL SALARY:'||V_SAL||'AVEREGE SALARY:'||V_AVGSAL);

	WHILE 	V_INC < V_AVGSAL	
	LOOP
		V_INC:=V_INC*1.02;
		DBMS_OUTPUT.PUT_LINE('INCREMENT:'||V_INC);
	END LOOP;
	
	V_INC:=ROUND(V_INC,0);
	
	IF V_INC > V_SAL THEN 
		UPDATE EMPLOYEES
		SET SALARY=V_INC
		WHERE EMPLOYEE_ID=V_ID;
	ELSE
		DBMS_OUTPUT.PUT_LINE('NOT ELIGEBLE FOR INCREMENT...');
	END IF;
			
END DISPINC;


	BEGIN
		DBMS_OUTPUT.PUT_LINE('CALLING PROCEDURE...');
		DISPINC;
	END;

=============================
PARAMETER IN MODE

CREATE PROCEDURE DISPINC(ID  IN NUMBER)
IS
	V_AVGSAL NUMBER(9,2);
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_INC V_SAL%TYPE;
	V_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
BEGIN
	SELECT ROUND(AVG(SALARY),0) INTO V_AVGSAL
	FROM EMPLOYEES;
	
	SELECT EMPLOYEE_ID,SALARY INTO V_ID,V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=ID;

	V_INC:=V_SAL;

	DBMS_OUTPUT.PUT_LINE('ID:'||V_ID||'ORDINAL SALARY:'||V_SAL||'AVEREGE SALARY:'||V_AVGSAL);

	WHILE 	V_INC < V_AVGSAL	
	LOOP
		V_INC:=V_INC*1.02;
		DBMS_OUTPUT.PUT_LINE('INCREMENT:'||V_INC);
	END LOOP;
	
	V_INC:=ROUND(V_INC,0);
	
	IF V_INC > V_SAL THEN 
		UPDATE EMPLOYEES
		SET SALARY=V_INC
		WHERE EMPLOYEE_ID=V_ID;
	ELSE
		DBMS_OUTPUT.PUT_LINE('NOT ELIGEBLE FOR INCREMENT...');
	END IF;
			
END DISPINC;

	BEGIN
		DBMS_OUTPUT.PUT_LINE('CALLING PROCEDURE...');
		DISPINC(102);
	END;
==========================================
PARAMETER OUT MODE

CREATE OR REPLACE PROCEDURE RETINC(ID  IN NUMBER,INC OUT NUMBER)
IS
	V_AVGSAL NUMBER(9,2);
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_INC V_SAL%TYPE;
BEGIN
	SELECT ROUND(AVG(SALARY),0) INTO V_AVGSAL
	FROM EMPLOYEES;
	
	SELECT SALARY INTO V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=ID;

	V_INC:=V_SAL;
	
	WHILE 	V_INC < V_AVGSAL	
	LOOP
		V_INC:=V_INC*1.02;
	END LOOP;
	
	V_INC:=ROUND(V_INC,0);	
	INC:=V_INC;
END RETINC;



	DECLARE
		V_INCSAL NUMBER(9,2);
		V_SAL NUMBER(9,2);
	BEGIN
	
		RETINC(133,V_INCSAL);
		--RETINC(INC->V_INCSAL,ID->133) 	--NAMED
		SELECT SALARY INTO V_SAL
		FROM EMPLOYEES 
		WHERE EMPLOYEE_ID=133;
		IF V_INCSAL > V_SAL THEN 
			UPDATE EMPLOYEES
			SET SALARY=V_INCSAL
			WHERE EMPLOYEE_ID=133;
		ELSE
		DBMS_OUTPUT.PUT_LINE('NOT ELIGEBLE FOR INCREMENT...');
		END IF;
	END;
=======================================
INOUT MODE

CREATE OR REPLACE PROCEDURE ABC(NO IN OUT VARCHAR2)
    IS
   BEGIN
      NO:='('||SUBSTR(NO,1,3)||')-'||SUBSTR(NO,4);
END ABC;

DECLARE
      X VARCHAR2(15):='123245678';
   BEGIN
     ABC(X);
     DBMS_OUTPUT.PUT_LINE(X);
  END;

=============================================================
FUNCTION

CREATE OR REPLACE FUNCTION GETINC(ID NUMBER) RETURN NUMBER
IS
	V_AVGSAL NUMBER(9,2);
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_INC V_SAL%TYPE;
BEGIN
	SELECT ROUND(AVG(SALARY),0) INTO V_AVGSAL
	FROM EMPLOYEES;
	
	SELECT SALARY INTO V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=ID;

	V_INC:=V_SAL;
	
	WHILE 	V_INC < V_AVGSAL	
	LOOP
		V_INC:=V_INC*1.02;
	END LOOP;
	
	V_INC:=ROUND(V_INC,0);
	RETURN V_INC;
END GETINC;

-----------
CREATE OR REPLACE PROCEDURE UPDINC(ID NUMBER)
IS
	V_NEWSAL NUMBER(9,2);
	V_SAL NUMBAR(9,2);
BEGIN
	V_NEWSAL:=GETINC(ID);
	SELECT SALARY INTO V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=ID;

	IF V_NEWSAL > V_SAL THEN 
			UPDATE EMPLOYEES
			SET SALARY=V_NEWSAL
			WHERE EMPLOYEE_ID=ID;
	ELSE
		DBMS_OUTPUT.PUT_LINE('NOT ELIGEBLE FOR INCREMENT...');
	END IF;
END UPDINC;


-------------------
BEGIN
	UPDINC(134);
END;

SELECT FIRST_NAME,SALARY,NVL(TO_CHAR(COMMISSION_PCT),'NO COMMISSION') COMMISSSION,SALARY+SALARY*NVL(COMMISSION_PCT,0) TOTAL,
GETINC(EMPLOYEE_ID) NEWSALARY
FROM EMPLOYEES
================================
STMT BEFORE TRIGGER

CREATE OR REPLACE TRIGGER SEC_EMP
BEFORE INSERT
ON EMPLOYEES
BEGIN
    IF TO_CHAR(SYSDATE,'DY')='FRI' THEN
               RAISE_APPLICATION_ERROR(-20111,'BUSINESS NOT ALLOWED ON                 WEEKENDS...');
   END IF;
END;
================================================
CONDITIONAL PREDICATE

CREATE OR REPLACE TRIGGER SEC_EMPL
BEFORE INSERT OR UPDATE OR DELETE
ON EMPLOYEES
BEGIN
    IF TO_CHAR(SYSDATE,'DY')='FRI' THEN
	IF INSERTING THEN
               RAISE_APPLICATION_ERROR(-20111,'CAN NOT INSEERT ON FRIDAY'); 
	END IF;
	
	IF UPDATING THEN
               RAISE_APPLICATION_ERROR(-20111,'CAN NOT UPDATE ON FRIDAY'); 
	END IF;

	IF DELETING THEN
               RAISE_APPLICATION_ERROR(-20111,'CAN NOT DELETE ON FRIDAY'); 
	END IF;
                					
   END IF;
END;
==========================================
BEFORE ROW

CREATE OR REPLACE TRIGGER CHK_SAL_JOB
  BEFORE INSERT OR UPDATE OF SALARY
   ON EMPLOYEES
    FOR EACH ROW
   DECLARE
      V_MINSAL JOBS.MIN_SALARY%TYPE;
       V_MAXSAL JOBS.MAX_SALARY%TYPE;
   BEGIN
       SELECT MIN_SALARY,MAX_SALARY INTO V_MINSAL,V_MAXSAL
    FROM JOBS
      WHERE JOB_ID=:NEW.JOB_ID;
      IF :NEW.SALARY  NOT BETWEEN V_MINSAL AND V_MAXSAL THEN
     RAISE_APPLICATION_ERROR(-20201,'EMPLOYEES SALARY SHOULD BE BETWEEN'||
	TO_CHAR(V_MINSAL) ||'	AND '||TO_CHAR(V_MAXSAL));
    END IF;
 END CHK_SAL_JOB;
/
=====================================
PACKAGE

CREATE OR REPLACE PACKAGE INC_PKG
AS
	--V_G NUMBER;
	PROCEDURE UPDINC(ID NUMBER);
END INC_PKG;

------------------


CREATE OR REPLACE PACKAGE BODY INC_PKG
AS
	--V_P NUMBER;
	FUNCTION GETINC( ID NUMBER) RETURN NUMBER;
	PROCEDURE UPDINC(ID NUMBER)
	IS
	V_NEWSAL NUMBER(9,2);
	V_SAL NUMBER(9,2);
	BEGIN
	V_NEWSAL:=GETINC(ID);
	SELECT SALARY INTO V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=ID;
	IF V_NEWSAL > V_SAL THEN 
			UPDATE EMPLOYEES
			SET SALARY=V_NEWSAL
			WHERE EMPLOYEE_ID=ID;
	ELSE
		DBMS_OUTPUT.PUT_LINE('NOT ELIGEBLE FOR INCREMENT...');
	END IF;
END UPDINC;

FUNCTION GETINC(ID NUMBER) RETURN NUMBER
IS
	V_AVGSAL NUMBER(9,2);
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_INC V_SAL%TYPE;
BEGIN
	SELECT ROUND(AVG(SALARY),0) INTO V_AVGSAL
	FROM EMPLOYEES;
	SELECT SALARY INTO V_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID=ID;
	V_INC:=V_SAL;
	WHILE 	V_INC < V_AVGSAL	
	LOOP
		V_INC:=V_INC*1.02;
	END LOOP;
	V_INC:=ROUND(V_INC,0);
	RETURN V_INC;
END GETINC;

END INC_PKG;
/

========================

BEGIN
INC_PKG.UPDINC(100);
END;
==========================================





	